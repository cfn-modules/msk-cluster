---
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'cfn-modules: AWS MSK'
Parameters:
  VpcModule:
    Description: 'Stack name of vpc module.'
    Type: String
  BrokerCount:
    Description: 'Number of kafka brokers to launch. Must be a multiple of number of subnets.'
    Type: Number
    Default: 2
  KafkaVersion:
    Description: 'Version of Kafka Cluster to deploy'
    Type: String
    Default: '2.2.1'
  ClientSgModule:
    Description: 'Stack name of client-sg module.'
    Type: String
  KmsKeyModule:
    Description: 'Stack name of kms-key module.'
    Type: String
    Default: ''
  BastionModule:
    Description: 'Optional but recommended stack name of module implementing Bastion.'
    Type: String
    Default: ''
  Use3Subnets:
    Description: 'Use three subnets if supported by the region and VPC'
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  InstanceType:
    Description: 'AWS Instance size / type for broker'
    Type: String
  MSKConfigurationArn:
    Description: 'The Amazon Resource Name (ARN) of the MSK configuration to use. For example, arn:aws:kafka:us-east-1:123456789012:configuration/example-configuration-name/abcdabcd-1234-abcd-1234-abcd123e8e8e-1.'
    Type: String
    Default: ''
  MSKConfigurationNumber:
    Type: Number
    Description: 'The revision of the Amazon MSK configuration to use'
    Default: 0
  EBSVolumeSize:
    Type: Number
    Description: 'The size in GiB of the EBS volume for the data drive on each broker node.'
    Default: 1
  TlsClientAuthentication:
    Description: 'Tls Client Authentication'
    Type: Number
    Default: 0
  TlsArnList:
    Description: 'Tls Certificate Arn List. Requires Tlc Client Authentication to be true'
    Type: List<String>
    Default: 'false'
  ClientBrokerEncryption:
    Description: 'TLS, PLAINTEXT, TLS_PLAINTEXT'
    Type: String
    Default: 'TLS_PLAINTEXT'
    AllowedValues: ['TLS', 'PLAINTEXT', 'TLS_PLAINTEXT']
  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events in the specified log group.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
Conditions:
  HasBastionModule: !Not [!Equals [!Ref BastionModule, '']]
  HasTlsClientAuthentication: !Not [!Equals [!Ref TlsClientAuthentication, 0]]
  HasMSKConfiguration: !And 
    - !Not [!Equals [!Ref MSKConfigurationArn, '']]
    - !Not [!Equals [!Ref MSKConfigurationNumber, 0]]
  HasClientSubnetC: !Not [!Equals [!Ref Use3Subnets, 'false']]
  HasKmsKeyModule: !Not [!Equals [!Ref KmsKeyModule, '']]
  HasClientSgModule: !Not [!Equals [!Ref ClientSgModule, '']]
Resources:
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 9092
        ToPort: 9092
        SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ClientSgModule}-SecurityGroupId'}
      - IpProtocol: tcp
        FromPort: 9094
        ToPort: 9094
        SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ClientSgModule}-SecurityGroupId'}
      - IpProtocol: tcp
        FromPort: 2181
        ToPort: 2181
        SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ClientSgModule}-SecurityGroupId'}
      VpcId: {'Fn::ImportValue': !Sub '${VpcModule}-Id'}
  SecurityGroupInKafkaFromBastion:
    Condition: HasBastionModule
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 9092
      ToPort: 9092
      SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${BastionModule}-SecurityGroupId'}
  MSKCluster:
    Type: AWS::MSK::Cluster
    Properties:
      BrokerNodeGroupInfo: 
        ClientSubnets: !If
        - HasClientSubnetC
        - - Fn::ImportValue: !Sub "${VpcModule}-SubnetIdAPrivate"
          - Fn::ImportValue: !Sub "${VpcModule}-SubnetIdBPrivate"
          - Fn::ImportValue: !Sub "${VpcModule}-SubnetIdCPrivate"
        - - Fn::ImportValue: !Sub "${VpcModule}-SubnetIdAPrivate"
          - Fn::ImportValue: !Sub "${VpcModule}-SubnetIdBPrivate"
        InstanceType: !Ref InstanceType
        SecurityGroups: !If
        - HasClientSgModule
        - - !Ref SecurityGroup
        - !Ref "AWS::NoValue"
        StorageInfo: 
          EBSStorageInfo: 
            VolumeSize: !Ref EBSVolumeSize
      ClientAuthentication: 
        !If
          - HasTlsClientAuthentication
          -
            CertificateAuthorityArnList: !Ref TlsClientAuthentication
          - !Ref "AWS::NoValue"
      ClusterName: !Sub '${AWS::StackName}'
      ConfigurationInfo: 
        !If
          - HasMSKConfiguration
          -
            Arn: !Ref MSKConfigurationArn
            Revision: !Ref MSKConfigurationNumber
          - !Ref "AWS::NoValue"
      EncryptionInfo:
        EncryptionInTransit:
          ClientBroker: !Ref ClientBrokerEncryption
          InCluster: true
        EncryptionAtRest: !If
          - HasKmsKeyModule
          -
            DataVolumeKMSKeyId: {'Fn::ImportValue': !Sub '${KmsKeyModule}-Arn'}
          - !Ref 'AWS::NoValue'
      KafkaVersion: !Ref KafkaVersion
      LoggingInfo: 
        BrokerLogs:
          CloudWatchLogs:
            Enabled: true
            LogGroup: !Ref LogGroup
      NumberOfBrokerNodes: !Ref BrokerCount
Outputs:
  ModuleVersion:
    Value: '1.0.0'
  StackName:
    Value: !Ref 'AWS::StackName'
    Export:
      Name: !Sub '${AWS::StackName}-Name'
  ClusterName:
    Value: !Ref MSKCluster
    Export:
      Name: !Sub '${AWS::StackName}-ClusterName'
